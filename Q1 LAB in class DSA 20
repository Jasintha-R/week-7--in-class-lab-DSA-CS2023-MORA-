#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};

//for creating a new node
struct node* NewNode(int data)
{
    node* temp = new node();
    temp -> key = data;
    temp -> left = NULL;
    temp -> right = NULL;
    return temp;
}

//To returns  minimum key value to the node 
struct node* MinValue(struct node* node){
    struct node* Node = node;
    while (Node->left != NULL){
        Node = Node -> left;
    }
    return Node;
}    

// Inorder traversal
void traverseIn0rder(struct node *root) 
{
     if(root == NULL)
     {
       return;
     }
    else 
    {
        traverseIn0rder(root -> left);
        cout << root -> key << " ";
        traverseIn0rder(root -> right);
    }
}


// Insert a node
struct node *insertNode(struct node *node, int key) 
{
    
    if (node == NULL)
    {
        return NewNode(key);
    }
    else if (key < node -> key)
    {
        node -> left = insertNode(node -> left, key);
    }
    else 
    {
        node -> right = insertNode(node->right,key);
    }
    return node;
}


// Deleting a node
struct node *deleteNode(struct node *root, int data)
{
    if (root ==NULL)
    {
        return root;
    }
    if (data < root -> key)
    {
        root -> left = deleteNode(root->left,data);
    }
    else if (data > root -> key)
    {
        root -> right = deleteNode(root->right,data);
    
    }
    else{
        //node have no child either right or left 
        if (root -> left == NULL and root -> right == NULL)
        {
            return NULL;
        }
        
        //only one child at right
        else if (root -> left == NULL)
        {
            struct node* temp = root -> right;
            free(root);
            return temp;
        }
        
        //only one child at left
        else if (root -> right == NULL)
        {
            struct node* temp = root -> left;
            free(root);
            return temp;
        }
        
        //Node having both left and right children
        else
        {
            struct node* temp = MinValue(root->right);
            root -> key = temp -> key;
            root -> right = deleteNode(root->right, temp -> key);
        }
 
    }
    return root;
}

// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseIn0rder(root);
}
